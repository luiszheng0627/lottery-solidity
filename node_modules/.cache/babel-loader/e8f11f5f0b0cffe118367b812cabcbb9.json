{"ast":null,"code":"var _jsxFileName = \"/Volumes/WORK/study/1.solidity/lottery-solidity/client/src/pages/lottery.page.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useAsyncMemo } from 'use-async-memo';\nimport _ from 'lodash';\nimport Lottery from '@/contracts/Lottery.json';\nimport MyCtx from '@/common/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LotteryPage = props => {\n  _s();\n\n  const web3 = useContext(MyCtx);\n  const lotterySC = useAsyncMemo(async () => {\n    if (_.isEmpty(web3)) return;\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Lottery.networks[networkId];\n    return new web3.eth.Contract(Lottery.abi, deployedNetwork && deployedNetwork.address);\n  }, [web3]);\n  const accounts = useAsyncMemo(async () => {\n    if (_.isEmpty(web3)) return [];\n    return await web3.eth.getAccounts();\n  }, [web3], []);\n  const manager = useAsyncMemo(async () => {\n    if (_.isEmpty(lotterySC)) return null;\n    return await lotterySC.methods.manager().call();\n  }, [lotterySC]);\n  const [players, setPlayers] = useState([]);\n  const [balance, setBalance] = useState('');\n  const [enterValue, setEnterValue] = useState('');\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (_.isEmpty(lotterySC) || _.isEmpty(accounts)) return;\n    Promise.all([lotterySC.methods.getPlayers().call(), web3.eth.getBalance(lotterySC.options.address)]).then(([players, balance]) => {\n      setPlayers(players);\n      setBalance(balance);\n    });\n  }, [lotterySC, accounts]);\n  const onSubmut = useCallback(async event => {\n    event.preventDefault();\n    setMessage('Waiting on transaction success...');\n    await lotterySC.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(enterValue, 'ether')\n    });\n    setMessage('You have been entered!');\n  });\n  const onClick = useCallback(async event => {\n    setMessage('Waiting on transaction success...');\n    await lotterySC.methods.pickWinner().send({\n      from: accounts[0]\n    });\n    setMessage('A winner has been picked!');\n  });\n\n  if (_.isEmpty(lotterySC) || _.isEmpty(manager) || _.isEmpty(accounts)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lottery Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Manager: \", manager]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current players: \", players.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Balance: \", web3.utils.fromWei(balance, 'ether'), \" ether\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmut,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Want to try your luck?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Amount of ether to enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enterValue,\n        onChange: event => setEnterValue(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Ready to pick winner?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"Pick a winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LotteryPage, \"+SAjRTpYCSrysjYOjVKtMqUbeW8=\", false, function () {\n  return [useAsyncMemo, useAsyncMemo, useAsyncMemo];\n});\n\n_c = LotteryPage;\nexport default LotteryPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LotteryPage\");","map":{"version":3,"sources":["/Volumes/WORK/study/1.solidity/lottery-solidity/client/src/pages/lottery.page.js"],"names":["React","useCallback","useContext","useEffect","useState","useAsyncMemo","_","Lottery","MyCtx","LotteryPage","props","web3","lotterySC","isEmpty","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address","accounts","getAccounts","manager","methods","call","players","setPlayers","balance","setBalance","enterValue","setEnterValue","message","setMessage","Promise","all","getPlayers","getBalance","options","then","onSubmut","event","preventDefault","enter","send","from","value","utils","toWei","onClick","pickWinner","length","fromWei","target"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useAsyncMemo } from 'use-async-memo'\nimport _ from 'lodash';\n\nimport Lottery from '@/contracts/Lottery.json';\nimport MyCtx from '@/common/context';\n\n\nconst LotteryPage = props => {\n  const web3 = useContext(MyCtx);\n\n  const lotterySC = useAsyncMemo(async () => {\n    if (_.isEmpty(web3)) return;\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Lottery.networks[networkId];\n\n    return new web3.eth.Contract(\n      Lottery.abi,\n      deployedNetwork && deployedNetwork.address,\n    );\n  }, [web3]);\n\n  const accounts = useAsyncMemo(async () => {\n    if (_.isEmpty(web3)) return [];\n    return await web3.eth.getAccounts();\n  }, [web3], []);\n\n  const manager = useAsyncMemo(async () => {\n    if (_.isEmpty(lotterySC)) return null;\n    return await lotterySC.methods.manager().call()\n  }, [lotterySC]);\n\n  const [players, setPlayers] = useState([]);\n  const [balance, setBalance] = useState('');\n  const [enterValue, setEnterValue] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (_.isEmpty(lotterySC) || _.isEmpty(accounts)) return;\n\n    Promise.all([\n      lotterySC.methods.getPlayers().call(),\n      web3.eth.getBalance(lotterySC.options.address),\n    ]).then(([players, balance]) => {\n      setPlayers(players);\n      setBalance(balance);\n    });\n  }, [lotterySC, accounts]);\n\n\n  const onSubmut = useCallback(async event => {\n    event.preventDefault();\n    setMessage('Waiting on transaction success...');\n\n    await lotterySC.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(enterValue, 'ether'),\n    });\n\n    setMessage('You have been entered!');\n  });\n\n  const onClick = useCallback(async event => {\n    setMessage('Waiting on transaction success...');\n\n    await lotterySC.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    setMessage('A winner has been picked!');\n  });\n\n  if (_.isEmpty(lotterySC) || _.isEmpty(manager) || _.isEmpty(accounts)) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  return (\n    <div className='App'>\n      <h1>Lottery Contract</h1>\n      <p>Contract Manager: {manager}</p>\n      <p>Current players: {players.length}</p>\n      <p>Total Balance: {web3.utils.fromWei(balance, 'ether')} ether</p>\n      <hr />\n      <form onSubmit={onSubmut}>\n        <h4>Want to try your luck?</h4>\n        <label>Amount of ether to enter</label>\n        <input value={enterValue} onChange={event => setEnterValue(event.target.value)} />\n        <button>Enter</button>\n      </form>\n      <hr />\n      <h4>Ready to pick winner?</h4>\n      <button onClick={onClick}>Pick a winner</button>\n      <hr />\n      <h4>{message}</h4>\n    </div>\n  );\n}\n\nexport default LotteryPage;\n"]},"metadata":{},"sourceType":"module"}